QUESTION 1) Develop a menu driven program demonstrating the following operations on simple 
Queues: enqueue(), dequeue(), isEmpty(), isFull(), display(), and peek().

#include <iostream>
using namespace std;

class Queue {
    int *arr, size, front, rear;

public:
    Queue(int s) {
        size = s;
        arr = new int[size];
        front = rear = -1;
    }

  bool isEmpty() { return (front == -1 || front > rear); }
   bool isFull()  { return (rear == size - 1); }

   void enqueue(int x) {
        if (isFull()) cout << "Queue FULL!\n";
        else {
            if (front == -1) front = 0;
            arr[++rear] = x;
            cout << x << " added\n";
        }
    }

  void dequeue() {
        if (isEmpty()) cout << "Queue EMPTY!\n";
        else cout << arr[front++] << " removed\n";
    }

   void peek() {
        if (isEmpty()) cout << "Queue EMPTY!\n";
        else cout << "Front: " << arr[front] << endl;
    }

  void display() {
        if (isEmpty()) cout << "Queue EMPTY!\n";
        else {
            cout << "Queue: ";
            for (int i = front; i <= rear; i++) cout << arr[i] << " ";
            cout << endl;
        }
    }
};

int main() {
    int n, ch, val;
    cout << "Enter queue size: ";
    cin >> n;
    Queue q(n);

   do {
        cout << "\n1.Enqueue  2.Dequeue  3.Peek  4.Display  0.Exit\n";
        cout << "Enter choice: ";
        cin >> ch;
        switch (ch) {
            case 1: cout << "Enter value: "; cin >> val; q.enqueue(val); break;
            case 2: q.dequeue(); break;
            case 3: q.peek(); break;
            case 4: q.display(); break;
            case 0: cout << "Exiting...\n"; break;
            default: cout << "Invalid!\n";
        }
    } while (ch != 0);
}
