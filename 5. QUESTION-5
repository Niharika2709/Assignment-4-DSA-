QUESTION 5) Write a program to implement a stack using (a) Two queues and (b) One Queue. 


#include <iostream>
#include <queue>
using namespace std;

class StackTwoQueues {
    queue<int> q1, q2;

public:
    void push(int x) {
        q2.push(x);  
        while (!q1.empty()) {
            q2.push(q1.front());
            q1.pop();
        }
        swap(q1, q2);  
        cout << x << " pushed to stack" << endl;
    }

    void pop() {
        if (q1.empty()) {
            cout << "Stack is EMPTY!" << endl;
            return;
        }
        cout << q1.front() << " popped from stack" << endl;
        q1.pop();
    }

    void top() {
        if (q1.empty()) {
            cout << "Stack is EMPTY!" << endl;
            return;
        }
        cout << "Top element: " << q1.front() << endl;
    }

    bool isEmpty() {
        return q1.empty();
    }

    void display() {
        if (q1.empty()) {
            cout << "Stack is EMPTY!" << endl;
            return;
        }
        cout << "Stack elements: ";
        queue<int> temp = q1;
        while (!temp.empty()) {
            cout << temp.front() << " ";
            temp.pop();
        }
        cout << endl;
    }
};

class StackOneQueue {
    queue<int> q;

public:
    void push(int x) {
        int size = q.size();
        q.push(x);
        for (int i = 0; i < size; i++) {
            q.push(q.front());
            q.pop();
        }
        cout << x << " pushed to stack" << endl;
    }

    void pop() {
        if (q.empty()) {
            cout << "Stack is EMPTY!" << endl;
            return;
        }
        cout << q.front() << " popped from stack" << endl;
        q.pop();
    }

    void top() {
        if (q.empty()) {
            cout << "Stack is EMPTY!" << endl;
            return;
        }
        cout << "Top element: " << q.front() << endl;
    }

    bool isEmpty() {
        return q.empty();
    }

    void display() {
        if (q.empty()) {
            cout << "Stack is EMPTY!" << endl;
            return;
        }
        cout << "Stack elements: ";
        queue<int> temp = q;
        while (!temp.empty()) {
            cout << temp.front() << " ";
            temp.pop();
        }
        cout << endl;
    }
};

int main() {
    StackTwoQueues s2q;
    StackOneQueue s1q;
    int choice, value, option;

    cout << "\nChoose Implementation:\n1. Stack using Two Queues\n2. Stack using One Queue\nEnter choice: ";
    cin >> option;

    do {
        cout << "\n--- Stack Menu ---" << endl;
        cout << "1. Push" << endl;
        cout << "2. Pop" << endl;
        cout << "3. Top" << endl;
        cout << "4. Display" << endl;
        cout << "0. Exit" << endl;
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value: ";
            cin >> value;
            if (option == 1) s2q.push(value);
            else s1q.push(value);
            break;
        case 2:
            if (option == 1) s2q.pop();
            else s1q.pop();
            break;
        case 3:
            if (option == 1) s2q.top();
            else s1q.top();
            break;
        case 4:
            if (option == 1) s2q.display();
            else s1q.display();
            break;
        case 0:
            cout << "Exiting..." << endl;
            break;
        default:
            cout << "Invalid choice!" << endl;
        }
    } while (choice != 0);

    return 0;
}
